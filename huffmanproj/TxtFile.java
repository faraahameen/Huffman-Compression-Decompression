/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package huffmanproj;

/**
 *
 * @author Farah ameen
 */

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.ByteBuffer;
import java.util.Comparator;
import java.util.HashMap;
import java.util.PriorityQueue;

/**
 *
 * @author Yasmin
 */
public class TxtFile {

    public class Node {

        private int value;
        private char data;
        private Node left = null;
        private Node right = null;

        public Node(int value, char data) {
            this.value = value;
            this.data = data;
            this.left = null;
            this.right = null;
        }

        public Node(int value, char data, Node left, Node right) {
            this.value = value;
            this.data = data;
            this.left = left;
            this.right = right;
        }

        public Node() {

        }

        public int getValue() {
            return value;
        }

        public void setValue(int value) {
            this.value = value;
        }

        public void setData(char data) {
            this.data = data;
        }

        public char getData() {
            return data;
        }

        public void setLeft(Node left) {
            this.left = left;
        }

        public void setRight(Node right) {
            this.right = right;
        }

        public Node getLeft() {
            return left;
        }

        public Node getRight() {
            return right;
        }

        public boolean isLeftNull() {
            if (this.left == null) {
                return true;
            } else {
                return false;
            }
        }

        public boolean isRightNull() {
            if (this.right == null) {
                return true;
            } else {
                return false;
            }
        }

    }
    Node n = new Node();

    public HashMap<Character, Integer> binaryMap = new HashMap<>();//binary codes
    // Strings of 1s and 0s which are mapped by a string
    public HashMap<Character, String> compressCodes = new HashMap<>();//compress
    // the string generated by compression is changed to 1's and 0's and mapped to original char
    public HashMap< String, Character> decompressMap = new HashMap<>();//decompress
    public PriorityQueue<Node> pq = new PriorityQueue<>(new Comparator<Node>() {
        // compare frequencies of the 2 nodes
        public int compare(Node n1, Node n2) {
            if (n1.getValue() < n2.getValue()) {
                return -1;
            }
            if (n1.getValue() > n2.getValue()) {
                return 1;
            }
            return 0;
        }
    });

    public void read() {

        String MainInput = "test_huffman.txt";
        String line = null;
        try {
            FileReader fileReader = new FileReader(MainInput);
            BufferedReader bufferedReader = new BufferedReader(fileReader);
            int ch;
            char character;
            int frequency = 1;
            while ((ch = bufferedReader.read()) > -1) {
                character = (char) ch;
                if (binaryMap.containsKey(character)) {
                    frequency = binaryMap.get(character) + 1;
                    binaryMap.put(character, frequency);
                } else {
                    binaryMap.put(character, 1);
                }
            }
        } catch (FileNotFoundException ex) {
            System.out.println("Can't find file " + MainInput);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    public void insertToHeap() {
        for (char key : binaryMap.keySet()) {
            Node node = new Node();
            node.setValue(binaryMap.get(key));
            node.setData(key);
            pq.add(node);
        }

    }

    public Node buildHuffmanTree() {
        while (pq.size() > 1) {
            Node left = pq.poll();
            Node right = pq.poll();
            Node n = new Node(left.getValue() + right.getValue(), ' ', left, right);
            pq.add(n);
        }
        return pq.poll();
    }

    public void getCodes(Node root, String code) {
        if (root == null) {
            return;
        }
        if (binaryMap.size() == 1) {
            compressCodes.put(root.getData(), "0");
            return;
        }
        if (root.isLeftNull() && root.isRightNull()) {
            compressCodes.put(root.getData(), code);
        }
        if (!root.isLeftNull() && !root.isRightNull()) {
            getCodes(root.getLeft(), code + "0");
            getCodes(root.getRight(), code + "1");
        }

    }
//total size of codes

    public int getCodeSize() {
        int size = 0;
        //keyset return character value ex a,b,c
        for (char key : compressCodes.keySet()) { // for( key in compressCodes.keySet) aka character in character list
            //get length of value[int] mapped by character in hashmap(compressCodes) and multiply it with value[int] mapped by character(key) in hashmap(binaryMap)
            size += compressCodes.get(key).length() * binaryMap.get(key);
        }
        return size;
    }

    public void compress() {
        String inputFile = "test_huffman.txt";
        String outputFile = "compressed.txt";
        FileReader fr = null;
        BufferedReader br = null;
        FileOutputStream stream = null;
        read();
        insertToHeap();
        Node root = buildHuffmanTree();
        getCodes(root, "");

        try {
            fr = new FileReader(inputFile);
            br = new BufferedReader(fr);
            stream = new FileOutputStream(outputFile);
            try {
                //saving codes in compressed file header
                //alloicate array of 4 bytes size of int [byteBuffer capacity]
                byte[] CodeSize = ByteBuffer.allocate(4).putInt(getCodeSize()).array();
                //write to file header
                stream.write(CodeSize);
                //array of 4 bytes
                //get mapsize: # of key,value pairs
                byte[] mapSizeBytes = ByteBuffer.allocate(4).putInt(compressCodes.size()).array();
                //write to file header
                stream.write(mapSizeBytes);
                // for every key in compressCode key set
                for (char key : compressCodes.keySet()) {
                    String character = new String();
                    // copy key in string variable character
                    character += key;
                    byte[] charBytes = character.getBytes();
                    //write character
                    stream.write(charBytes);
                    //get size in byte for each key in the keyset
                    byte[] sizeBytes = ByteBuffer.allocate(4).putInt(compressCodes.get(key).length()).array();
                    //write to file header
                    stream.write(sizeBytes);
                    //get each character code in byte 0s and 1s
                    byte[] codeBytes = compressCodes.get(key).getBytes();
                    //write the codes to file header
                    stream.write(codeBytes);
                    System.out.println(key + " = " + compressCodes.get(key));
                }
                //saving compressed TxtFile
                String code = new String();
                int charac;
                char c;
                while ((charac = br.read()) != -1) {
                    c = (char) charac;
                    code += compressCodes.get(c);
                    // if code length is a set of bytes and length of code>0
                    if (code.length() % 8 == 0 && code.length() != 0) {
                        int length = code.length();
                        byte[] bytes = new byte[(length + Byte.SIZE - 1) / Byte.SIZE];//BYTE.SIZE hold values from -128 to 127
                        char character;
                        int i = 0;
                        while (i < length) {
                            if ((character = code.charAt(i)) == '1') {
                                // we will OR (bytes[i / Byte.SIZE] BY (0x80 >>> (i % Byte.SIZE)) for bit masking
                                //Bitwise shift because we are dealing with a sequence of bits not a number
                                bytes[i / Byte.SIZE] = (byte) (bytes[i / Byte.SIZE] | (0x80 >>> (i % Byte.SIZE)));
                            }
                            i++;
                        }
                        //write to file
                        stream.write(bytes);
                        code = "";
                    }

                }
                if (code.length() > 0) { // && code.length%8 !=0
                    int length = code.length();
                    byte[] bytes = new byte[(length + Byte.SIZE - 1) / Byte.SIZE];
                    char character;
                    int i = 0;
                    while (i < length) {
                        if ((character = code.charAt(i)) == '1') {
                            // we will OR (bytes[i / Byte.SIZE] BY (0x80 >>> (i % Byte.SIZE))for bit masking
                            //Bitwise shift because we are dealing with a sequence of bits not a number 
                            bytes[i / Byte.SIZE] = (byte) (bytes[i / Byte.SIZE] | (0x80 >>> (i % Byte.SIZE)));// 0x80 is hexadecimal for 128, shift bits of 128 right by(i%byte.size),fill with 0 bits on the  left
                        }
                        i++;
                    }
                    //write to file
                    stream.write(bytes);
                    code = "";
                }
                System.out.println("File is successfully compressed");
                stream.close();
            } catch (FileNotFoundException ex) {
                System.out.println("Can't find file " + outputFile);
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        } catch (FileNotFoundException ex) {
            System.out.println("Can't find file " + inputFile);
        }
    }

    public void decompress() {
        String input = "compressed.txt";
        String output = "decompressed.txt";
        File file = new File(input);
        FileInputStream stream = null;
        BufferedWriter bw = null;
        FileWriter fw = null;
        int i, j, m, size, n, y;
        char c;
        try {
            stream = new FileInputStream(file);
            byte fileContent[] = new byte[(int) file.length()];
            fw = new FileWriter(output);
            bw = new BufferedWriter(fw);
            stream.read(fileContent);
            stream.close();
            String s = new String();
            int sizeOfCode, sizeOfMap;
            //first 4 bytes in header which is the total code size
            for (i = 0; i < 4; i++) {
                //if value less than 2 bytes[16 bits] preappend 0's
                s += String.format("%02x", fileContent[i]);
            }
            // we read total code size from compressed file header and parse it to int to know total code size
            sizeOfCode = Integer.parseInt(s, 16);
            s = "";
            // we get the sizeofmap from compressed file header[string format]
            for (j = i; j < i + 4; j++) {
                //if value less than 2 bytes[16] preappend 0's
                s += String.format("%02x", fileContent[j]);
            }
            // //parse the mapsize[16 bits] to int
            sizeOfMap = Integer.parseInt(s, 16);
            s = "";
            int count = j;
            //loop on mapsize[size of keys,values as pair]
            int k = 0;
            while (k < sizeOfMap) {
                c = (char) fileContent[count];
                count++;
                for (m = count; m < count + 4; m++) {
                    //if value less than 2 bytes[16] preappend 0's
                    s += String.format("%02x", fileContent[m]);
                }
                //parse the size[16 bits] to int
                size = Integer.parseInt(s, 16);
                s = "";
                String code = new String();
                //after we read the size of code byte per char from header we loop on every string size it to get contents for each byte size
                n = m;
                while (n < m + size) {
                    code += (char) fileContent[n];
                    n++;
                }
                decompressMap.put(code, c);
                count = n;
                k++;
            }
            s = "";
            try {
                String decode = new String();
                int index = 0, taken = 0;
                //loop on file length and change from binary 0's and 1's mapped by char back to strings
                for (y = count; y < fileContent.length; y++) {
                    s += String.format("%8s", Integer.toBinaryString(fileContent[y] & 0xFF)).replace(' ', '0');
                    int z = 0;
                    while (z < s.length()) {
                        decode += s.charAt(z);
                        if (decompressMap.containsKey(decode)) {
                            taken += decode.length();
                            if (taken <= sizeOfCode) {
                                bw.write(decompressMap.get(decode));
                                decode = "";
                                index = z;
                            }
                        }
                        z++;
                    }
                    if (index != 0) {
                        s = s.substring(index + 1, s.length());
                        index = 0;
                    }
                    decode = "";
                }
                System.out.println("File is successfully decompressed");
                bw.close();
            } catch (FileNotFoundException ex) {
                System.out.println("Can't find file '" + output);
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        } catch (FileNotFoundException ex) {
            System.out.println("Can't find file" + input);
        } catch (IOException ex) {
            ex.printStackTrace();
        }

    }

}
